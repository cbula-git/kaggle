#!/usr/bin/env python3
"""
Coverage Zone Exploitation Analysis
====================================
Analyze which zones are most frequently exploited against different coverage schemes.

This script examines:
- Target rates by zone for each coverage type (Cover 2, 3, 4, etc.)
- Success rates when targeting specific zones
- Zone vulnerability patterns in different coverages
- Strategic weaknesses of each coverage scheme
"""

import sys
sys.path.insert(0, '/Users/cbulacan/cbula-git/kaggle/src')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path

# Set style
sns.set_style("whitegrid")
plt.rcParams['figure.figsize'] = (20, 12)

def load_data():
    """Load zone vulnerability and supplementary data."""
    print("Loading data...")
    zone_data = pd.read_parquet('data/consolidated/zone_vulnerability_timeseries.parquet')
    supp_data = pd.read_parquet('data/consolidated/supplementary.parquet')

    # Merge
    data = zone_data.merge(
        supp_data[['game_id', 'play_id', 'team_coverage_type', 'team_coverage_man_zone', 'pass_result']],
        on=['game_id', 'play_id'],
        how='left'
    )

    print(f"Loaded {len(data):,} zone-frame records")
    print(f"Coverage types: {sorted(data['team_coverage_type'].dropna().unique())}")
    print()

    return data

def analyze_zone_exploitation_by_coverage(data):
    """
    Calculate which zones are targeted against each coverage type.

    Returns DataFrame with target rates and success rates by coverage-zone combination.
    """
    print("Analyzing zone exploitation by coverage type...")

    # Filter to throw frame (when decision is made)
    throw_data = data[data['phase'] == 'at_throw'].copy()

    # Focus on zone coverages (more interesting patterns)
    zone_coverages = throw_data[throw_data['team_coverage_man_zone'] == 'ZONE_COVERAGE'].copy()

    # Main zone coverage types
    coverage_types = ['COVER_2_ZONE', 'COVER_3_ZONE', 'COVER_4_ZONE', 'COVER_6_ZONE']

    results = []

    for coverage in coverage_types:
        cov_data = zone_coverages[zone_coverages['team_coverage_type'] == coverage]

        if len(cov_data) == 0:
            continue

        # Total plays with this coverage
        total_plays = cov_data[['game_id', 'play_id']].drop_duplicates().shape[0]

        # For each zone, calculate metrics
        for zone_id in cov_data['zone_id'].unique():
            zone_data_cov = cov_data[cov_data['zone_id'] == zone_id]

            # Get target zone data
            targets = zone_data_cov[zone_data_cov['is_target_zone'] == True]

            # How many times this zone was targeted
            times_targeted = targets[['game_id', 'play_id']].drop_duplicates().shape[0]

            # Target rate (% of plays where this zone was targeted)
            target_rate = times_targeted / total_plays if total_plays > 0 else 0

            # Get completion data for targeted plays
            if times_targeted > 0:
                target_plays = targets[['game_id', 'play_id', 'pass_result']].drop_duplicates()
                completion_rate = (target_plays['pass_result'] == 'C').mean()

                # Average void score when targeted
                avg_void_when_targeted = targets['zone_void_score'].mean()

                # Average defender count when targeted
                avg_defenders = targets['defender_count'].mean()
            else:
                completion_rate = None
                avg_void_when_targeted = None
                avg_defenders = None

            # Overall void score for this zone in this coverage
            avg_void_overall = zone_data_cov['zone_void_score'].mean()

            results.append({
                'coverage_type': coverage,
                'zone_id': zone_id,
                'zone_depth': zone_id.split('_')[0],
                'zone_lateral': '_'.join(zone_id.split('_')[1:]),
                'total_plays': total_plays,
                'times_targeted': times_targeted,
                'target_rate': target_rate,
                'completion_rate': completion_rate,
                'avg_void_when_targeted': avg_void_when_targeted,
                'avg_void_overall': avg_void_overall,
                'avg_defenders_when_targeted': avg_defenders
            })

    results_df = pd.DataFrame(results)
    return results_df

def create_coverage_exploitation_heatmaps(exploitation_df, save_dir='visualizations'):
    """Create heatmaps showing target rates for each coverage type."""
    print("Creating coverage exploitation heatmaps...")

    save_dir = Path(save_dir)
    save_dir.mkdir(exist_ok=True)

    coverage_types = exploitation_df['coverage_type'].unique()

    # Create a large figure with subplots for each coverage
    fig, axes = plt.subplots(2, 2, figsize=(20, 14))
    axes = axes.flatten()

    depth_order = ['deep', 'intermediate', 'shallow']
    lateral_order = ['far_left', 'left_hash', 'middle', 'right_hash', 'far_right']

    for idx, coverage in enumerate(sorted(coverage_types)):
        if idx >= 4:
            break

        ax = axes[idx]

        # Filter data for this coverage
        cov_data = exploitation_df[exploitation_df['coverage_type'] == coverage]

        # Create pivot table for heatmap
        pivot = cov_data.pivot_table(
            index='zone_depth',
            columns='zone_lateral',
            values='target_rate',
            aggfunc='first'
        )

        # Reorder
        pivot = pivot.reindex(index=depth_order, columns=lateral_order)

        # Convert to percentage
        pivot = pivot * 100

        # Plot heatmap
        sns.heatmap(pivot, annot=True, fmt='.1f', cmap='YlOrRd',
                    center=pivot.mean().mean(),
                    cbar_kws={'label': 'Target Rate (%)'},
                    ax=ax, vmin=0, vmax=15)

        # Format
        coverage_name = coverage.replace('_ZONE', '').replace('_', ' ').title()
        total_plays = cov_data['total_plays'].iloc[0]
        ax.set_title(f'{coverage_name}\n({total_plays:,} plays)',
                     fontsize=14, fontweight='bold')
        ax.set_xlabel('Lateral Position', fontweight='bold')
        ax.set_ylabel('Depth from LOS', fontweight='bold')

    plt.suptitle('Zone Exploitation Rates by Coverage Type\n(% of plays targeting each zone)',
                 fontsize=16, fontweight='bold', y=0.995)
    plt.tight_layout()

    save_path = save_dir / 'coverage_zone_exploitation_heatmaps.png'
    plt.savefig(save_path, dpi=300, bbox_inches='tight')
    print(f"Saved heatmap to {save_path}")

    return fig

def create_coverage_success_rate_heatmaps(exploitation_df, save_dir='visualizations'):
    """Create heatmaps showing completion rates when targeting each zone."""
    print("Creating completion rate heatmaps...")

    save_dir = Path(save_dir)

    coverage_types = exploitation_df['coverage_type'].unique()

    fig, axes = plt.subplots(2, 2, figsize=(20, 14))
    axes = axes.flatten()

    depth_order = ['deep', 'intermediate', 'shallow']
    lateral_order = ['far_left', 'left_hash', 'middle', 'right_hash', 'far_right']

    for idx, coverage in enumerate(sorted(coverage_types)):
        if idx >= 4:
            break

        ax = axes[idx]

        # Filter data
        cov_data = exploitation_df[
            (exploitation_df['coverage_type'] == coverage) &
            (exploitation_df['times_targeted'] >= 5)  # Min 5 targets for reliable rate
        ]

        # Create pivot
        pivot = cov_data.pivot_table(
            index='zone_depth',
            columns='zone_lateral',
            values='completion_rate',
            aggfunc='first'
        )

        pivot = pivot.reindex(index=depth_order, columns=lateral_order)
        pivot = pivot * 100  # Convert to percentage

        # Plot
        sns.heatmap(pivot, annot=True, fmt='.1f', cmap='RdYlGn_r',
                    center=65,  # League average ~65-70%
                    cbar_kws={'label': 'Completion Rate (%)'},
                    ax=ax, vmin=40, vmax=90)

        coverage_name = coverage.replace('_ZONE', '').replace('_', ' ').title()
        ax.set_title(f'{coverage_name} - Completion Rate When Targeted\n(min 5 targets)',
                     fontsize=14, fontweight='bold')
        ax.set_xlabel('Lateral Position', fontweight='bold')
        ax.set_ylabel('Depth from LOS', fontweight='bold')

    plt.suptitle('Completion Rates by Zone and Coverage Type\n(when zone is targeted)',
                 fontsize=16, fontweight='bold', y=0.995)
    plt.tight_layout()

    save_path = save_dir / 'coverage_zone_completion_rates.png'
    plt.savefig(save_path, dpi=300, bbox_inches='tight')
    print(f"Saved completion rate heatmap to {save_path}")

    return fig

def generate_coverage_insights(exploitation_df):
    """Generate strategic insights for each coverage type."""
    print()
    print("=" * 80)
    print("COVERAGE SCHEME VULNERABILITY ANALYSIS")
    print("=" * 80)
    print()

    coverage_types = sorted(exploitation_df['coverage_type'].unique())

    for coverage in coverage_types:
        cov_data = exploitation_df[exploitation_df['coverage_type'] == coverage]

        coverage_name = coverage.replace('_ZONE', '').replace('_', ' ').title()
        total_plays = cov_data['total_plays'].iloc[0]

        print(f"{coverage_name}")
        print("-" * 80)
        print(f"Sample size: {total_plays:,} plays")
        print()

        # Most targeted zones
        print("Most Frequently Targeted Zones:")
        top_targets = cov_data.nlargest(5, 'target_rate')[
            ['zone_id', 'target_rate', 'times_targeted', 'completion_rate', 'avg_void_when_targeted']
        ]
        for idx, row in top_targets.iterrows():
            if pd.notna(row['completion_rate']):
                print(f"  {row['zone_id']:25s} - {row['target_rate']*100:5.1f}% target rate "
                      f"({row['times_targeted']:3.0f} times), {row['completion_rate']*100:5.1f}% completion, "
                      f"void={row['avg_void_when_targeted']:5.1f}")

        print()

        # Highest success zones (min 5 targets)
        high_success = cov_data[
            (cov_data['times_targeted'] >= 5) &
            (cov_data['completion_rate'].notna())
        ].nlargest(3, 'completion_rate')

        if len(high_success) > 0:
            print("Highest Completion Rate Zones (min 5 targets):")
            for idx, row in high_success.iterrows():
                print(f"  {row['zone_id']:25s} - {row['completion_rate']*100:5.1f}% completion "
                      f"({row['times_targeted']:3.0f} targets), void={row['avg_void_when_targeted']:5.1f}")
            print()

        # Most vulnerable zones (high void + frequently targeted)
        vulnerable = cov_data[cov_data['times_targeted'] >= 3].nlargest(3, 'avg_void_when_targeted')
        if len(vulnerable) > 0:
            print("Most Vulnerable Zones (high void when targeted):")
            for idx, row in vulnerable.iterrows():
                comp_str = f"{row['completion_rate']*100:5.1f}%" if pd.notna(row['completion_rate']) else "N/A"
                print(f"  {row['zone_id']:25s} - void={row['avg_void_when_targeted']:5.1f}, "
                      f"{comp_str} completion ({row['times_targeted']:3.0f} targets)")

        print()
        print("=" * 80)
        print()

def main():
    """Run coverage zone exploitation analysis."""
    print("=" * 80)
    print("COVERAGE ZONE EXPLOITATION ANALYSIS")
    print("=" * 80)
    print()

    # Load data
    data = load_data()

    # Analyze exploitation
    exploitation_df = analyze_zone_exploitation_by_coverage(data)

    # Save results
    output_dir = Path('data/consolidated')
    exploitation_df.to_csv(output_dir / 'coverage_zone_exploitation.csv', index=False)
    print(f"✓ Saved exploitation data to {output_dir}/coverage_zone_exploitation.csv")
    print()

    # Create visualizations
    create_coverage_exploitation_heatmaps(exploitation_df)
    create_coverage_success_rate_heatmaps(exploitation_df)

    # Generate insights
    generate_coverage_insights(exploitation_df)

    print()
    print("=" * 80)
    print("ANALYSIS COMPLETE!")
    print("=" * 80)

    return exploitation_df

if __name__ == '__main__':
    exploitation_df = main()
